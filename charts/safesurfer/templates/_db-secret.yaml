#
# Define a secret named "db-login" containing a username and password for database authentication.
# If we're using an external database, this is templated in plain. Otherwise, it's generated when
# the chart is applied.
#
{{- define "dbSecret" }}
#
# Behavior for internal DB.
#
{{ if .Values.db.inCluster.enabled }}
{{ include "dbAuthInjectorJob" (dict "targetNamespace" .targetNamespace "dbUsername" .Values.db.inCluster.pguser "dbName" .Values.db.inCluster.name "dbNamespace" .Values.db.namespace) }}
{{ end }}
#
# Behavior for external DB.
#
{{ if .Values.db.external.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "name" (dict "Release" .Release "name" `db` .nameOverride .Values.db.inCluster.nameOverride) }}-login
  namespace: {{ include "ns" (dict "Values" .Values "Release" .Release "IndividualNamespace" .targetNamespace) }}
type: Opaque
data:
  password: {{ .Values.db.external.pgpassword | b64enc | quote }}
  username: {{ .Values.db.external.pguser | b64enc | quote }}
{{ end }}
{{ end }}